x2=c(rep(0,2), sqrt(2),-sqrt(2) ),
y = c(159,157,154,151))
mydata <- rbind(mydata,mydatac, mydatacomp)
mydata
fit <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit)
anova(fit)
fit_constant <- lm( y~ 1, data =mydata)
summary(fit_constant)
anova(fit_constant)
fit_linear <- lm( y~ x1+x2, data =mydata)
summary(fit_linear)
anova(fit_linear)
fit_2FI <- lm( y~ x1*x2, data =mydata)
summary(fit_2FI)
anova(fit_2FI)
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata)
summary(fit_cuadratic)
anova(fit_cuadratic)
fit_cubic <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit_cubic)
anova(fit_cubic)
anova(fit_linear, fit_2FI, fit_cuadratic,fit_cubic ) #comparación de modelos
library(alr3)
install.packages("alr3")
install.packages("car")
mydata <- expand.grid( x2=c(-1,1), x1=c(-1,1))
mydata
mydata$y <- c(150,154,159,145)
mydatac<- data.frame(x1=rep(0,5), x2=rep(0,5), y = c(147,145,148,144,145))
mydatac
mydatacomp <- data.frame(x1=c(sqrt(2),-sqrt(2), rep(0,2)),
x2=c(rep(0,2), sqrt(2),-sqrt(2) ),
y = c(159,157,154,151))
mydata <- rbind(mydata,mydatac, mydatacomp)
mydata
#mydata$cuadratic <- c(rep(0,4),rep(1,5), rep(0,4))
#mydata$cubic <- c(rep(0,9), rep(1,4))
mydata
fit <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit)
anova(fit)
fit_constant <- lm( y~ 1, data =mydata)
summary(fit_constant)
anova(fit_constant)
fit_linear <- lm( y~ x1+x2, data =mydata)
summary(fit_linear)
anova(fit_linear)
fit_2FI <- lm( y~ x1*x2, data =mydata)
summary(fit_2FI)
anova(fit_2FI)
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata)
summary(fit_cuadratic)
anova(fit_cuadratic)
fit_cubic <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit_cubic)
anova(fit_cubic)
anova(fit_linear, fit_2FI, fit_cuadratic,fit_cubic ) #comparación de modelos
# El mejor modelo es el modelo 3, que se diferencia del ajuste lineal
library(alr3)
library(car)
library(car)
library(alr3)
pureErrorAnova(fit_linear) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_2FI) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_cubic) # Lack of fit señala un ajuste pobre
car::vif(fit_cubic)
library(qpcR)
PRESS(fit_cubic) #Calcula prediction R2
pureErrorAnova(fit_cubic)
pureErrorAnova(fit_cuadratic) # lack of fit señala el mejor ajuste
car::vif(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
mydata2 <- mydata
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
vmax = 200
vmin = 400
mydata2$x2 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x2)
vmax = 100
vmin = 200
mydata2$x1 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x1)
mydata2
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata2)
summary(fit_cuadratic)
anova(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
residuals(fit_cuadratic)
layout(matrix(c(1:4),nrow=2, ncol=2, byrow=T))
plot(fit_cuadratic)
library(alr3)
pureErrorAnova(fit_cuadratic) # Lack of fit señala un ajuste muy bueno del modelo
library (rsm)
df <- fit_cuadratic$model
df <- with(df , aggregate(y, list(Tiempo=x1, Temperatura=x2), mean))
CR1 <- coded.data(df, x1 ~ Tiempo, x2 ~ Temperatura)
fit2.rsm = rsm (x ~  SO(x1, x2), data = CR1) #Ajuste de segundo orden (SO)
summary(fit2.rsm)
CR1.rsmi <- update(fit2.rsm, . ~ . + TWI(x1, x2))
layout(matrix(c(1,2),nrow=1, ncol=2, byrow=T))
contour (CR1.rsmi, ~ (x1+x2+ x1*x2), col="black", xlabs = c("Tiempo", "Temperatura"))
persp (CR1.rsmi, ~ (x1+x2 + x1*x2), contours="col", col=rainbow(40),
xlabs = c("Tiempo", "Temperatura"), zlab = "Rendimiento")
mydata <- expand.grid( x2=c(-1,1), x1=c(-1,1))
mydata
mydata$y <- c(150,154,159,145)
mydatac<- data.frame(x1=rep(0,5), x2=rep(0,5), y = c(147,145,148,144,145))
mydatac
mydatacomp <- data.frame(x1=c(sqrt(2),-sqrt(2), rep(0,2)),
x2=c(rep(0,2), sqrt(2),-sqrt(2) ),
y = c(159,157,154,151))
mydata <- rbind(mydata,mydatac, mydatacomp)
mydata
#mydata$cuadratic <- c(rep(0,4),rep(1,5), rep(0,4))
#mydata$cubic <- c(rep(0,9), rep(1,4))
mydata
fit <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit)
anova(fit)
fit_constant <- lm( y~ 1, data =mydata)
summary(fit_constant)
anova(fit_constant)
fit_linear <- lm( y~ x1+x2, data =mydata)
summary(fit_linear)
anova(fit_linear)
fit_2FI <- lm( y~ x1*x2, data =mydata)
summary(fit_2FI)
anova(fit_2FI)
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata)
summary(fit_cuadratic)
anova(fit_cuadratic)
fit_cubic <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit_cubic)
anova(fit_cubic)
anova(fit_linear, fit_2FI, fit_cuadratic,fit_cubic ) #comparación de modelos
# El mejor modelo es el modelo 3, que se diferencia del ajuste lineal
pureErrorAnova(fit_linear) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_2FI) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_cubic) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_cuadratic) # lack of fit señala el mejor ajuste
car::vif(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
mydata2 <- mydata
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
vmax = 200
vmin = 400
mydata2$x2 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x2)
vmax = 100
vmin = 200
mydata2$x1 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x1)
mydata2
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata2)
summary(fit_cuadratic)
fit_cuadratic <- lm( y~ x1*+ I(x1^2) , data =mydata2)
summary(fit_cuadratic)
anova(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
residuals(fit_cuadratic)
layout(matrix(c(1:4),nrow=2, ncol=2, byrow=T))
plot(fit_cuadratic)
library(alr3)
pureErrorAnova(fit_cuadratic) # Lack of fit señala un ajuste muy bueno del modelo
library (rsm)
df <- fit_cuadratic$model
df <- with(df , aggregate(y, list(Tiempo=x1, Temperatura=x2), mean))
CR1 <- coded.data(df, x1 ~ Tiempo, x2 ~ Temperatura)
fit2.rsm = rsm (x ~  SO(x1, x2), data = CR1) #Ajuste de segundo orden (SO)
summary(fit2.rsm)
CR1.rsmi <- update(fit2.rsm, . ~ . + TWI(x1, x2))
B <- coefficients(fit_cuadratic)
B
x1 <- (B[3]*B[6]-2*B[2]*B[5])/(4*B[4]*B[5]-B[6]^2)
x1
x2 <- (B[2]*B[6]-2*B[3]*B[4])/(4*B[4]*B[5]-B[6]^2)
x2
mydata2 <- mydata
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
vmax = 200
vmin = 400
mydata2$x2 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x2)
vmax = 100
vmin = 200
mydata2$x1 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x1)
mydata2
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata2)
summary(fit_cuadratic)
anova(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
residuals(fit_cuadratic)
layout(matrix(c(1:4),nrow=2, ncol=2, byrow=T))
plot(fit_cuadratic)
library(alr3)
pureErrorAnova(fit_cuadratic) # Lack of fit señala un ajuste muy bueno del modelo
library (rsm)
df <- fit_cuadratic$model
df <- with(df , aggregate(y, list(Tiempo=x1, Temperatura=x2), mean))
CR1 <- coded.data(df, x1 ~ Tiempo, x2 ~ Temperatura)
fit2.rsm = rsm (x ~  SO(x1, x2), data = CR1) #Ajuste de segundo orden (SO)
summary(fit2.rsm)
CR1.rsmi <- update(fit2.rsm, . ~ . + TWI(x1, x2))
layout(matrix(c(1,2),nrow=1, ncol=2, byrow=T))
contour (CR1.rsmi, ~ (x1+x2+ x1*x2), col="black", xlabs = c("Tiempo", "Temperatura"))
persp (CR1.rsmi, ~ (x1+x2 + x1*x2), contours="col", col=rainbow(40),
xlabs = c("Tiempo", "Temperatura"), zlab = "Rendimiento")
##########################################################################
B <- coefficients(fit_cuadratic)
B
x1 <- (B[3]*B[6]-2*B[2]*B[5])/(4*B[4]*B[5]-B[6]^2)
x1
x2 <- (B[2]*B[6]-2*B[3]*B[4])/(4*B[4]*B[5]-B[6]^2)
x2
mydata2 <- mydata
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
vmax = 200
vmin = 400
mydata2$x2 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x2)
vmax = 100
vmin = 200
mydata2$x1 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x1)
mydata2
mydata = read.table("C:/Users/ma.restrepot/Dropbox/MAESTRIA 201810/Diseño de experimentos/Examenes/Repaso examen final/1-6.txt")  # read text file
a <- dim(mydata)[1] # numero de tratamientos
n <- dim(mydata)[2] # numero de datos por tratamiento
mydata$Power <- c("m1","m2","m3")
mydata
library(reshape)
mdata <- melt(mydata, id = "Power")
mdata <- mdata[,-2] #QUITAR LA COLUMNA 2
colnames(mdata) <- c("Power","Etch.Rate")
mdata$Power <- as.factor(mdata$Power) #LA VUELVO COMO UN FACTOR
mdata
str(mdata)
boxplot(Etch.Rate ~ Power, data = mdata, ylab ="Etch Rate", xlab ="Power", col = "green")
fit <-  aov(Etch.Rate ~ Power, data=mdata)
summary(fit)
tt <- summary(fit)
class(tt)
MSE <- tt[[1]][2,"Mean Sq"]
MSE
layout(matrix(1:4,2,2))
plot(fit)
dev.off()
plot(fit$residuals, type="p" ,col = "dark red", pch = 19) # scatter plot de residuos
abline(h=0, col="red")
dev.off()
qqnorm(fit$residuals, main = "Normal Q-Q Plot of residuals")
qqline(fit$residuals, col = "red")
bartlett.test(Etch.Rate ~ Power, data=mdata)
shapiro.test( residuals(fit))
shapiro.test( residuals(fit))
library(agricolae)
out <- LSD.test(fit,"Power", p.adj="bonferroni", alpha = 0.01, group=FALSE,console=TRUE)
TukeyHSD(fit, conf.level = 0.99)
r <- c(10,14,7,8,7,18,11,8,5,10,11,9,10,10,12,14)
r <- c(10,14,7,8,7,18,11,8,5,10,11,9,10,10,12,14)
f1 <- 1:4
f2 <- 1:4
k1 = length(f1)          # number of 1st factors
k2 = length(f2)          # number of 2nd factors
n = 1                   # observations per treatment
Lotes = gl(k1, n*k2, n*k1*k2, factor(f1)) #k1 niveles se repite cada uno n*k2 veces hasta completar n*k1*k2
Lotes
Operarios = gl(k2, 1, n*k1*k2, factor(f2)) #k2 niveles se repite cada uno 1 vez hasta completar n*k1*k2
Operarios
Tratamientos <- c("C","D","A","B",
"B","C","D","A",
"A","B","C","D",
"D","A","B","C")
Tratamientos <- as.factor(Tratamientos)
Tratamientos
mdata <- data.frame(Lotes, Operarios, Tratamientos,r)
mdata
mdata2 <- mdata[complete.cases(mdata),]
mdata2
av = aov(r ~Operarios +  Tratamientos , data = mdata2)
summary(av)
av = aov(r ~Lotes +Operarios +  Tratamientos , data = mdata2)
summary(av)
av = aov(r ~Operarios +  Tratamientos , data = mdata2)
summary(av)
layout(matrix(1:4,2,2))
plot(av)
shapiro.test( residuals(av))
TukeyHSD(av, conf.level = 0.99)
mydata = read.table("C:/Users/ma.restrepot/Dropbox/MAESTRIA 201810/Diseño de experimentos/Examenes/Repaso examen final/11-13.txt")  # read text file
a <- dim(mydata)[1] # numero de tratamientos
n <- dim(mydata)[2] # numero de datos por tratamiento
mydata$veltal <- c(1,1,2,2)
library(reshape)
mdata <- melt(mydata, id = "veltal")
colnames(mdata) <- c("veltal","alimentacion", "dureza")
par(mfrow=c(1,1))
boxplot(dureza~veltal, data=mdata,ylab ="dureza", xlab ="veltal", col = "green")
interaction.plot(x.factor     = mdata$alimentacion,
trace.factor = mdata$veltal,
response     = mdata$dureza,
fun = mean,
type="b",
col=c("black","red","green", "blue"),  ### Colors for levels of trace var.
pch=c(19, 17, 15, 13),                 ### Symbols for levels of trace var.
fixed=TRUE,                            ### Order by factor order in data
leg.bty = "o")
interaction.plot(x.factor     = mdata$veltal,
trace.factor = mdata$alimentacion,
response     = mdata$dureza,
fun = mean,
type="b",
col=c("black","red","green", "blue"),  ### Colors for levels of trace var.
pch=c(19, 17, 15, 13),                 ### Symbols for levels of trace var.
fixed=TRUE,                            ### Order by factor order in data
leg.bty = "o")
fit <-  aov(dureza ~ as.factor(veltal) * as.factor(alimentacion), data=mdata)
summary(fit)
layout(matrix(1:4,2,2))
plot(fit)
par(mfrow=c(1,1))
shapiro.test( residuals(fit))
bartlett.test(Etch.Rate ~ dureza, data=mdata)
bartlett.test(dureza ~ alimentacion, veltal, data=mdata)
bartlett.test(dureza ~ alimentacion,  data=mdata)
bartlett.test(dureza ~ veltal,  data=mdata)
bartlett.test(fit,  data=mdata)
mydata <- expand.grid( x2=c(-1,1), x1=c(-1,1))
mydata
mydata$y <- c(150,154,159,145)
mydatac<- data.frame(x1=rep(0,5), x2=rep(0,5), y = c(147,145,148,144,145))
mydatac
mydatacomp <- data.frame(x1=c(sqrt(2),-sqrt(2), rep(0,2)),
x2=c(rep(0,2), sqrt(2),-sqrt(2) ),
y = c(159,157,154,151))
mydata <- rbind(mydata,mydatac, mydatacomp)
mydata
mydata
fit <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit)
anova(fit)
fit_constant <- lm( y~ 1, data =mydata)
summary(fit_constant)
anova(fit_constant)
fit_linear <- lm( y~ x1+x2, data =mydata)
summary(fit_linear)
anova(fit_linear)
fit_2FI <- lm( y~ x1*x2, data =mydata)
summary(fit_2FI)
anova(fit_2FI)
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata)
summary(fit_cuadratic)
anova(fit_cuadratic)
fit_cubic <- lm(y ~ x1*x2 + I(x1^2) + I(x2^2) + I(x1^3) + I(x2^3) +
I(x1^2*x2) + I(x2^2*x1), data = mydata)
summary(fit_cubic)
anova(fit_cubic)
anova(fit_linear, fit_2FI, fit_cuadratic,fit_cubic ) #comparación de modelos
library(alr3)
library(car)
pureErrorAnova(fit_linear) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_2FI) # Lack of fit señala un ajuste pobre
pureErrorAnova(fit_cubic) # Lack of fit señala un ajuste pobre
car::vif(fit_cubic)
library(qpcR)
PRESS(fit_cubic) #Calcula prediction R2
pureErrorAnova(fit_cubic)
pureErrorAnova(fit_cuadratic) # lack of fit señala el mejor ajuste
car::vif(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
mydata2 <- mydata
v_real <- function(v_codif,vmin,vmax) {
valor <- (v_codif+1)*(vmax-vmin)/2+vmin
return(valor)
}
vmax = 200
vmin = 400
mydata2$x2 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x2)
vmax = 100
vmin = 200
mydata2$x1 <- mapply(  function(x) {(x+1)*(vmax-vmin)/2+vmin} , mydata$x1)
mydata2
fit_cuadratic <- lm( y~ x1*x2+ I(x1^2) + I(x2^2), data =mydata2)
summary(fit_cuadratic)
anova(fit_cuadratic)
library(qpcR)
PRESS(fit_cuadratic) #Calcula prediction R2
residuals(fit_cuadratic)
layout(matrix(c(1:4),nrow=2, ncol=2, byrow=T))
plot(fit_cuadratic)
library(alr3)
pureErrorAnova(fit_cuadratic) # Lack of fit señala un ajuste muy bueno del modelo
library (rsm)
df <- fit_cuadratic$model
df <- with(df , aggregate(y, list(Tiempo=x1, Temperatura=x2), mean))
CR1 <- coded.data(df, x1 ~ Tiempo, x2 ~ Temperatura)
fit2.rsm = rsm (x ~  SO(x1, x2), data = CR1) #Ajuste de segundo orden (SO)
summary(fit2.rsm)
CR1.rsmi <- update(fit2.rsm, . ~ . + TWI(x1, x2))
layout(matrix(c(1,2),nrow=1, ncol=2, byrow=T))
contour (CR1.rsmi, ~ (x1+x2+ x1*x2), col="black", xlabs = c("Tiempo", "Temperatura"))
persp (CR1.rsmi, ~ (x1+x2 + x1*x2), contours="col", col=rainbow(40),
xlabs = c("Tiempo", "Temperatura"), zlab = "Rendimiento")
B <- coefficients(fit_cuadratic)
1+1
misdatos=list(Nombre="Alejandra Restrepo",
Edad= 23,
Mujer= TRUE)
misdatos
misdatos[[1]]
misdatos[[2]]
misdatos[[3]]
misdatos$telefono =3006650948
misdatos
misdatos$hijos= TRUE
misdatos
misdatos$hijos= NA
misdatos
misdatos$hijos= Null
misdatos$hijos= NULL
misdatos
numero=c(1:20)
numero
genero=c(T,F,T,F)
genero
numero[1]
numero[5]
numero=numero[-4]
numero
dias=c('L','M','M','J','V','S','D')
dias=c('L','M','M','J','V','S','D')
unique(dias)
names=c("Qing", "Françoise", "Raúl", "Bjork")
ages=c(32,33,28,30)
country=c("China", "Senegal", "Spain", "Norway")
education=c("Bach", "Bach", "Master", "PhD")
#DF es una composición de columnas en formato de vector:
DF_vectors=data.frame(names,ages,country,education)
DF_vectors
#descripcion del data frame
str(DF_vector)
names=c("Qing", "Françoise", "Raúl", "Bjork")
ages=c(32,33,28,30)
country=c("China", "Senegal", "Spain", "Norway")
education=c("Bach", "Bach", "Master", "PhD")
#DF es una composición de columnas en formato de vector:
DF_vectors=data.frame(names,ages,country,education)
DF_vectors
#descripcion del data frame
str(DF_vector)
#descripcion del data frame
str(DF_vectors)
# cuantas filas y columnas tienes:
dim(students)
#descripcion del data frame
str(DF_vectors)
# cuantas filas y columnas tienes:
dim(DF_vectors)
#Cuantas filas
nrow(DF_vectors)  # we have ncol() too!
#Cuantas columnas
length(DF_vectors)
value=-100
#condicion
if (value >= 0){
# si es Verdadero
rootValue=sqrt(value)
print (rootValue)
} else {
# si es Falso
print('Lo lamento, no calculo raíces cuadradas de números negativos')
}
value=5
#condicion
if (value >= 0){
# si es Verdadero
rootValue=sqrt(value)
print (rootValue)
} else {
# si es Falso
print('Lo lamento, no calculo raíces cuadradas de números negativos')
}
values=c(9,25,100)
for (value in values){ # mientras hayan valores en 'values'
print(sqrt(value))
}
setwd("~/Repositorios/ProyectoFinalHerramientas")
